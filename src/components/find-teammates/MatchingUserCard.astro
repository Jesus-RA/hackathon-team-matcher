---
import RequestConnectionButton from '@/components/find-teammates/RequestConnectionButton.vue';

const { user } = Astro.props;

const { name, bio, job_title, matching_score, technologies, existing_connection } = user;

const mapRequiredPeople = (required_people: number) => {
    const requiredPeople = required_people === 5 ? '5+' : required_people;

    return required_people > 1 ? `${requiredPeople} people` : '1 person';
}
---

<div class="grid grid-rows-[auto_1fr_auto] gap-y-6 p-6 shadow-sm rounded-lg light-dark-theme">
    <div class="flex justify-between items-start">
        <div>
            <h2 class="text-xl font-bold">{ name }</h2>
            <p class="text-gray-600 dark:text-gray-400">{ job_title }</p>
        </div>
        <span class="bg-gray-100 dark:bg-gray-700 px-3 py-1 rounded-full text-sm font-medium">
            {matching_score.total_percentage.toFixed(0)}% Match
        </span>
    </div>
    
    <div class="flex flex-col gap-y-6">
        <p class="text-sm">{ bio }</p>
        
        <section>
            <h3 class="text-sm font-medium mb-2">Technologies</h3>
            <div class="flex flex-wrap gap-2">
                {!technologies.length &&
                    <span class="px-2 py-1 bg-gray-100 dark:bg-gray-700 rounded-md text-xs">No technologies listed</span>
                }
                {technologies && technologies.map((tech) => (
                    <span 
                        class="px-2 py-1 bg-gray-100 dark:bg-gray-700 rounded-md text-xs"
                    >
                        {tech.name}
                    </span>
                ))}
            </div>
        </section>
        
        <section>
            <h3 class="text-sm font-medium mb-2">Would like to work on</h3>
            <div class="flex flex-wrap gap-2">
                {!user?.interests?.length &&
                    <span class="px-2 py-1 bg-gray-100 dark:bg-gray-700 rounded-md text-xs">Nothing listed</span>
                }
                {user?.interests && user?.interests?.map((interest) => (
                    <span 
                        class="px-2 py-1 bg-gray-100 dark:bg-gray-700 rounded-md text-xs"
                    >
                        {interest.name}
                    </span>
                ))}
            </div>
        </section>

        <section>
            <h3 class="text-sm font-medium mb-2">Looking for</h3>
            <div class="flex flex-wrap gap-2">
                {!user?.looking_for?.length &&
                    <span class="px-2 py-1 bg-gray-100 dark:bg-gray-700 rounded-md text-xs">Nothing listed</span>
                }
                {user?.looking_for && user?.looking_for?.map((looking_for) => (
                    <span 
                        class="px-2 py-1 bg-gray-100 dark:bg-gray-700 rounded-md text-xs"
                    >
                        {looking_for.name} ({mapRequiredPeople(looking_for.required_people)})
                    </span>
                ))}
            </div>
        </section>

        <section class="mt-auto">
            <h3 class="text-sm font-medium mb-2">Matching details</h3>
            <ul class="flex flex-wrap gap-2">
                {Object.values(matching_score).length > 0 && (
                    matching_score.categories.map(({name, score, max_score}) => (
                        <li class="px-2 py-1 bg-gray-100 dark:bg-gray-700 rounded-md text-xs">{name}: {score}/{max_score}</li>
                    ))
                )}
            </ul>
        </section>
    </div>

    <div class="mt-6 flex gap-2">
        <RequestConnectionButton client:load user_id={user.clerk_user_id} existing_connection={existing_connection} />
    </div>
</div>