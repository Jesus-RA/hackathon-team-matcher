---
import Layout from '@/layouts/Layout.astro';
import MatchingUserCard from '@/components/find-teammates/MatchingUserCard.astro';

import { getOtherUsersProfileData, getUserProfileData } from '@/lib/user_profile.js';
import { calculateMatchingScore } from '@/lib/users_matching';
import { checkExistingConnection } from '@/lib/connection_requests.js';

const user = await Astro.locals.currentUser();
let { data, error } = await getOtherUsersProfileData(user?.id);
const currentUser = await getUserProfileData(user?.id);

if(error) {
 data = [];
}

const matchingUsers = await Promise.all(data?.map(async (user) => {
    const existing_connection = await checkExistingConnection(currentUser?.clerk_user_id, user?.clerk_user_id);

    return {
        ...user,
        matching_score: calculateMatchingScore(currentUser, user),
        existing_connection,
    };
}))
---

<Layout title="Find Teammates">
    <section class="h-dvh flex flex-col gap-y-6 md:gap-y-8 p-4 overflow-y-auto">
        <h1 class="text-3xl font-bold">Find your team! ðŸš€</h1>
        <p class="">Find potential team members for your hackathon project.</p>

        {!matchingUsers.length && 
            <section class="h-[50vh] flex items-center justify-center">
                <p class="text-center bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-white  py-6 px-12 rounded shadow">There are no devs available yet. Share to your network to find potential team members.</p>
            </section>
        }
        {matchingUsers?.length > 0 && (
            <section class="grid md:grid-cols-2 lg:grid-cols-3 gap-6" >
                {matchingUsers.length && matchingUsers.map(user => (
                    <MatchingUserCard user={user} />
                ))}
            </section>
        )}
    </section>
</Layout>

<script is:inline define:vars={{ currentUserId: currentUser.clerk_user_id }} type="module">
    import { createConnectionRequest } from '/src/lib/connection_requests.js';
    

    const connectWithDev = async (event) => {
        const recipientUserId = event.currentTarget.dataset.userId;

        try {
            const response = await createConnectionRequest(currentUserId, recipientUserId);
            if(!response) {
                alert('Error connecting with dev, please try again later');
            }
            
            // TODO: Show success message and turn Connect button into label displaying connection details
            // TODO: Turn this component into a Vue component to be able to use sonner
        } catch (error) {
            console.error('Error connecting with dev:', error);
        }
    }

    const connectButtons = document.querySelectorAll('.connect-button');
    
    connectButtons.forEach(button => button.addEventListener('click', connectWithDev));
</script>
    